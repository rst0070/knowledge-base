services:

  neo4j:
    container_name: kb-neo4j
    image: neo4j:5.26.8-community
    # volumes:
    #     - /$HOME/neo4j/logs:/logs
    #     - /$HOME/neo4j/config:/config
    #     - /$HOME/neo4j/data:/data
    #     - /$HOME/neo4j/plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/thisispasswd
    networks:
      - kb-network
    ports:
      - "7474:7474"
      - "7687:7687"
    restart: always

  kafka:
    container_name: kb-kafka
    image: apache/kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - kb-network
    environment:
      KAFKA_NODE_ID: 1
      # id between kafka cluster

      KAFKA_PROCESS_ROLES: broker,controller
      # (KRaft mode)

      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092

      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

  kafka-ui:
    container_name: kb-kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9090:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: 'kafka:9092'
      KAFKA_CLUSTERS_0_NAME: 'local'
    networks:
      - kb-network

  redis:
    container_name: kb-redis
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - kb-network

  kb-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kb-api
    image: kb-api:latest
    ports:
      - 3000:3000
    networks:
      - kb-network
    depends_on:
      - kafka
      - redis
    volumes:
      - .:/app
    command: |
      poetry run uvicorn knowledge_base.app.api.main:app --port 3000 --host 0.0.0.0 --env-file .env

  kb-consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kb-consumer
    image: kb-consumer:latest
    networks:
      - kb-network
    depends_on:
      - kafka
      - redis
    volumes:
      - .:/app
    command: |
      poetry run python -m knowledge_base.app.add_consumer.main --env-file .env

networks:
  kb-network:
    driver: bridge
